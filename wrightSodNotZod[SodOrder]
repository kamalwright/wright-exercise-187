//AUTHOR:Kamal Wright
//COURSE:CPT187
//PURPOSE:To calculate the price of the sod order with discounts
//STARTDATE: December 4th 2019

package edu.cpt187.wright.participation;

public class SodOrder 
{
	//SodOrder Class variables
	private final double ZERO_TOTAL = 0.0;
	private final double TAX_RATE = .075;
	private int[] itemCounts = {};
	private int[] discountCounts = {};
	private int[] prizeCounts = {};
	private char discountType = ' ';
	private String itemName = "";
	private double itemPrice = 0.0;
	private String discountName = "";
	private double discountRate = 0.0;
	private int howMany = 0;
	private int lastItemSelectedIndex = 0;
	private String prizeName = "";
	
	//SodOrder Constructor
	public SodOrder()
	{
		
	}
	//Set itemCounts array size
	public void setItemCountArray(int borrowedRecordCount)
	{
		if(itemCounts.length == 0)
		{
			itemCounts = new int[borrowedRecordCount];
		}
	}
	//Set lastItemSelected Index to borrowedSearchIndex
	public void setItemSelection(int borrowedSearchIndex)
	{
		lastItemSelectedIndex = borrowedSearchIndex;
	}
	//Set itemName to borrowedItemNames with the lastItemSelectedIndex
	public void setItemName(String[] borrowedItemNames)
	{	
		itemName = borrowedItemNames[lastItemSelectedIndex];	
	}
	//set itemPrice to borrowedItemPrice with the lastItemSelectedIndex
	public void setItemPrice(double[] borrowedItemPrices)
	{
		itemPrice = borrowedItemPrices[lastItemSelectedIndex];
		itemCounts[lastItemSelectedIndex]++;
	}
	//set How many to borrowedHowMany
	public void setHowMany(int borrowedHowMany)
	{
		howMany = borrowedHowMany;
	}
	//Set discountType to borrowedMenuSelection
	public void setDiscountType(char borrowedMenuSelection)
	{
		discountType = borrowedMenuSelection;
	}
	//Set discountName to borrowedDiscountNames
	public void setDiscountName(String[] borrowedDiscountNames)
	{
		if(discountType == 'A')
		{
			discountName = borrowedDiscountNames[0];
		}
		else if(discountType == 'B')
		{
			discountName = borrowedDiscountNames[1];
		}
		else
		{
			discountName = borrowedDiscountNames[2];
		}
			
	}
	//Sets discountRate to borrowedDiscountRate increments the counter
	public void setDiscountRate(double[] borrowedDiscountRate)
	{
		if(discountCounts.length == 0)
		{
			discountCounts = new int[borrowedDiscountRate.length];	
		}
		if(discountType == 'A')
		{
			discountRate = borrowedDiscountRate[0];
			discountCounts[0]++;
		}
		else if(discountType == 'B')
		{
			discountRate = borrowedDiscountRate[1];
			discountCounts[1]++;
		}
		else
		{
			discountRate = borrowedDiscountRate[2];
			discountCounts[2]++;
		}
		
	}
	//set prize name to borrowedPrizeNames increments the counter
	public void setPrizeName(String[] borrowedPrizeNames, int borrowedPrizeIndex)
	{
		if(prizeCounts.length == 0)
		{
			prizeCounts = new int[borrowedPrizeNames.length];
			
		}
		if(borrowedPrizeIndex == 0)
		{
			prizeName = borrowedPrizeNames[0];
			prizeCounts[0]++;
		}
		else if(borrowedPrizeIndex == 1)
		{
			prizeName = borrowedPrizeNames[1];
			prizeCounts[1]++;
		}
		else
		{
			prizeName = borrowedPrizeNames[2];
			prizeCounts[2]++;
		}
	}
	//Sets decrease in stock using the borrowedObject
	public void setDecreaseInStock(Inventory borrowedInventoryObject)
	{
		borrowedInventoryObject.setReduceStock(howMany);
	}
	//return borrowedInStockCounts using lastItemSelectedIndex
	public int getInStockCount(int[] borrowedInStockCounts)
	{
		return borrowedInStockCounts[lastItemSelectedIndex];
	}
	//return lastItemSelectedIndex
	public int getItemID()
	{
		return lastItemSelectedIndex;
	}
	//return ItemName
	public String getItemName()
	{
		return itemName;
	}
	//return ItemPrice
	public double getItemPrice()
	{
		return itemPrice;
	}
	//return itemCount
	public int[] getItemCounts()
	{
		return itemCounts;
	}
	//return howMany
	public int getHowMany()
	{
		return howMany;
	}
	//return discountName
	public String getDiscountName()
	{
		return discountName;
	}
	//return discountRate
	public double getDiscountRate()
	{
		return discountRate;
	}
	//return discountCounts
	public int[] getDiscountCounts()
	{
		return discountCounts;
	}
	//returns the calculation itemPrice times discountRate
	public double getDiscountAmt()
	{
		return itemPrice * discountRate;
	}
	//returns the calculation itemPrice minus the discountAmt
	public double getDiscountPrice()
	{
		return itemPrice - getDiscountAmt();
	}
	//returns prizeName
	public String getPrizeName()
	{
		return prizeName;
	}
	//return prizeCount
	public int[] getPrizeCounts()
	{
		return prizeCounts;
	}
	//returns the calculation of howMany times discountPrice
	public double getSubTotal()
	{
		return howMany * getDiscountPrice();
	}
	//returns Tax Rate
	public double getTaxRate()
	{
		return TAX_RATE;
	}
	//returns TAX_RATE times subtotal
	public double getTaxAmt()
	{
		return TAX_RATE * getSubTotal();
	}
	//returns either ZERO_TOTAL or the calculation of subtotal plus tax
	public double getTotalCost()
	{
		if(discountType == ' ')
		{
			return ZERO_TOTAL;
		}
		else
		{
			return getSubTotal() + getTaxAmt();
		}
	}

}
